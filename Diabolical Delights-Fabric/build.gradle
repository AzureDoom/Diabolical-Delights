plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import com.modrinth.minotaur.dependencies.ModDependency

version = project.mod_version
group = project.maven_group
base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url 'https://libs.azuredoom.com:4443/mods'}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
  	modImplementation "mod.azure.azurelib:azurelib-fabric-${project.minecraft_version}:${project.azurelib_version}"
}

processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

if (file('key.properties').exists()) {
    task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())
        apiToken = curseProp.getProperty("curseKey")

        def mainFile = upload("${curse_id}", remapJar)
        mainFile.releaseType = "release"
        mainFile.changelogType = "text"
        mainFile.addRequirement "fabric-api"
        mainFile.addRequirement "azurelib"
        mainFile.addOptional "jackocache"
        mainFile.changelog = file("changelog.txt")
        mainFile.addModLoader("Fabric", "Quilt")
        mainFile.addJavaVersion("Java 17")
        mainFile.addGameVersion("1.20.1")
    }
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())
		
		token = modrinthProp.getProperty('modrinthKey')
		projectId = project.modrinth_id
		versionNumber = project.mod_version 
		uploadFile = remapJar 
		changelog = rootProject.file("changelog.txt").text
		gameVersions = ['1.20.1']
		loaders = ['fabric','quilt']
		dependencies { 
        	required.project "azurelib"
        	required.project "fabric-api"
        	optional.project "jackocache"
   		}
	}
}